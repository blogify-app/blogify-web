/* tslint:disable */
/* eslint-disable */
/**
 * Blogify - API
 * Log in and blog on [Blogify-web](https://github.com/blogify-app/blogify-web)  to blog and interact with other users using [Blogify-api](https://github.com/blogify-app/blogify-api)  as your giveaway provider. Comment, create posts, follow new trends and react to posts as you see fit.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {Configuration} from "./configuration";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from "./base";

/**
 *
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {string}
   * @memberof Category
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  label?: string;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  content?: string;
  /**
   *
   * @type {Date}
   * @memberof Comment
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  reply_to_comment_id?: string;
  /**
   *
   * @type {CommentStatus}
   * @memberof Comment
   */
  status?: CommentStatus;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum CommentStatus {
  ARCHIVED = "ARCHIVED",
  ENABLED = "ENABLED",
}

/**
 *
 * @export
 * @interface Exception
 */
export interface Exception {
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  message?: string;
}
/**
 *
 * @export
 * @interface InternalServerException
 */
export interface InternalServerException {
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface LoginInUser
 */
export interface LoginInUser {
  /**
   *
   * @type {string}
   * @memberof LoginInUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof LoginInUser
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof LoginInUser
   */
  userId?: string;
}
/**
 *
 * @export
 * @interface NotAuthorizedException
 */
export interface NotAuthorizedException {
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {string}
   * @memberof Post
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  picture_url?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title?: string;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  creation_datetime?: Date;
  /**
   *
   * @type {number}
   * @memberof Post
   */
  reaction_count?: number;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  updated_at?: Date;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  user_id?: string;
  /**
   *
   * @type {PostStatus}
   * @memberof Post
   */
  status?: PostStatus;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum PostStatus {
  ARCHIVED = "ARCHIVED",
  ENABLED = "ENABLED",
  DRAFT = "DRAFT",
}

/**
 *
 * @export
 * @interface Reaction
 */
export interface Reaction {
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  id?: string;
  /**
   *
   * @type {ReactionType}
   * @memberof Reaction
   */
  type?: ReactionType;
  /**
   *
   * @type {Date}
   * @memberof Reaction
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  user_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  comment_id?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum ReactionType {
  LIKE = "LIKE",
  DISLIKE = "DISLIKE",
}

/**
 *
 * @export
 * @interface ResourceNotFoundException
 */
export interface ResourceNotFoundException {
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  message?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum Role {
  CLIENT = "CLIENT",
  MANAGER = "MANAGER",
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Sex {
  M = "M",
  F = "F",
  OTHER = "OTHER",
}

/**
 *
 * @export
 * @interface SignUp
 */
export interface SignUp {
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  email?: string;
}
/**
 *
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof User
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof User
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
}
/**
 *
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof UserInfo
   */
  email?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum UserStatus {
  ENABLED = "ENABLED",
  BANISHED = "BANISHED",
}

/**
 *
 * @export
 * @interface Whoami
 */
export interface Whoami {
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  bearer?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  email?: string;
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create or update comment.
     * @param {string} postId
     * @param {Array<Post>} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateComment: async (
      postId: string,
      post: Array<Post>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists("crupdateComment", "postId", postId);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("crupdateComment", "post", post);
      const localVarPath = `/posts/{post_id}/comments`.replace(
        `{${"post_id"}}`,
        encodeURIComponent(String(postId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} postId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById: async (
      postId: string,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postId' is not null or undefined
      assertParamExists("getCommentById", "postId", postId);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCommentById", "id", id);
      const localVarPath = `/posts/{post_id}/comments/{id}`
        .replace(`{${"post_id"}}`, encodeURIComponent(String(postId)))
        .replace(`{${"id"}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get comments of identified post.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments: async (
      page: number,
      pageSize: number,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getComments", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getComments", "pageSize", pageSize);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getComments", "id", id);
      const localVarPath = `/posts/{id}/comments`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToComment: async (
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reactToComment", "id", id);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("reactToComment", "commentId", commentId);
      // verify required parameter 'reactionType' is not null or undefined
      assertParamExists("reactToComment", "reactionType", reactionType);
      const localVarPath = `/post/{id}/comments/{comment_id}/reaction`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (reactionType !== undefined) {
        localVarQueryParameter["reaction_type"] = reactionType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create or update comment.
     * @param {string} postId
     * @param {Array<Post>} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateComment(
      postId: string,
      post: Array<Post>,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.crupdateComment(
        postId,
        post,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} postId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentById(
      postId: string,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentById(
        postId,
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get comments of identified post.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getComments(
      page: number,
      pageSize: number,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getComments(
        page,
        pageSize,
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToComment(
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reactToComment(
        id,
        commentId,
        reactionType,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CommentsApiFp(configuration);
  return {
    /**
     *
     * @summary Create or update comment.
     * @param {string} postId
     * @param {Array<Post>} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateComment(
      postId: string,
      post: Array<Post>,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .crupdateComment(postId, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} postId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById(
      postId: string,
      id: string,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .getCommentById(postId, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get comments of identified post.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getComments(
      page: number,
      pageSize: number,
      id: string,
      options?: any
    ): AxiosPromise<Array<Comment>> {
      return localVarFp
        .getComments(page, pageSize, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToComment(
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToComment(id, commentId, reactionType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
  /**
   *
   * @summary Create or update comment.
   * @param {string} postId
   * @param {Array<Post>} post Post to archive or delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public crupdateComment(
    postId: string,
    post: Array<Post>,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .crupdateComment(postId, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get comment by identifier.
   * @param {string} postId
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentById(
    postId: string,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getCommentById(postId, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get comments of identified post.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getComments(
    page: number,
    pageSize: number,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getComments(page, pageSize, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a comment by identifier.
   * @param {string} id
   * @param {string} commentId
   * @param {ReactionType} reactionType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public reactToComment(
    id: string,
    commentId: string,
    reactionType: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .reactToComment(id, commentId, reactionType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FollowingApi - axios parameter creator
 * @export
 */
export const FollowingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("followUserById", "userId", userId);
      const localVarPath = `/follow/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Followers of identified user.
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [followerName] Filter follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFollowers: async (
      id: string,
      page: number,
      pageSize: number,
      followerName?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserFollowers", "id", id);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getUserFollowers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getUserFollowers", "pageSize", pageSize);
      const localVarPath = `/users/{id}/followers`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (followerName !== undefined) {
        localVarQueryParameter["follower_name"] = followerName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("unfollowUserById", "userId", userId);
      const localVarPath = `/unfollow/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FollowingApi - functional programming interface
 * @export
 */
export const FollowingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FollowingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followUserById(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followUserById(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Followers of identified user.
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [followerName] Filter follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserFollowers(
      id: string,
      page: number,
      pageSize: number,
      followerName?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUserFollowers(
          id,
          page,
          pageSize,
          followerName,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unfollowUserById(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unfollowUserById(userId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FollowingApi - factory interface
 * @export
 */
export const FollowingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FollowingApiFp(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .followUserById(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Followers of identified user.
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [followerName] Filter follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserFollowers(
      id: string,
      page: number,
      pageSize: number,
      followerName?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUserFollowers(id, page, pageSize, followerName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .unfollowUserById(userId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FollowingApi - object-oriented interface
 * @export
 * @class FollowingApi
 * @extends {BaseAPI}
 */
export class FollowingApi extends BaseAPI {
  /**
   *
   * @summary Follow user by identifier.
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public followUserById(userId: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .followUserById(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Followers of identified user.
   * @param {string} id
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [followerName] Filter follower by first name or lastname.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public getUserFollowers(
    id: string,
    page: number,
    pageSize: number,
    followerName?: string,
    options?: AxiosRequestConfig
  ) {
    return FollowingApiFp(this.configuration)
      .getUserFollowers(id, page, pageSize, followerName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Follow user by identifier.
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public unfollowUserById(userId: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .unfollowUserById(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @summary ping.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public ping(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PostingApi - axios parameter creator
 * @export
 */
export const PostingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Create or Update post by identifier.
     * @param {string} id
     * @param {Post} post Post to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById: async (
      id: string,
      post: Post,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("crupdatePostById", "id", id);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("crupdatePostById", "post", post);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete or archive a post.
     * @param {string} id
     * @param {Post} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArchivePost: async (
      id: string,
      post: Post,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteArchivePost", "id", id);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("deleteArchivePost", "post", post);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPostById", "id", id);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filter post by list of category label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      page: number,
      pageSize: number,
      categories?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getPosts", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getPosts", "pageSize", pageSize);
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (categories !== undefined) {
        localVarQueryParameter["categories"] = categories;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById: async (
      id: string,
      reactionType: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reactToPostById", "id", id);
      // verify required parameter 'reactionType' is not null or undefined
      assertParamExists("reactToPostById", "reactionType", reactionType);
      const localVarPath = `/posts/{id}/reaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (reactionType !== undefined) {
        localVarQueryParameter["reaction_type"] = reactionType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostingApi - functional programming interface
 * @export
 */
export const PostingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Create or Update post by identifier.
     * @param {string} id
     * @param {Post} post Post to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdatePostById(
      id: string,
      post: Post,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdatePostById(id, post, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete or archive a post.
     * @param {string} id
     * @param {Post} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteArchivePost(
      id: string,
      post: Post,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteArchivePost(id, post, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filter post by list of category label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        page,
        pageSize,
        categories,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToPostById(
      id: string,
      reactionType: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reactToPostById(
        id,
        reactionType,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PostingApi - factory interface
 * @export
 */
export const PostingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PostingApiFp(configuration);
  return {
    /**
     *
     * @summary Create or Update post by identifier.
     * @param {string} id
     * @param {Post} post Post to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById(
      id: string,
      post: Post,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .crupdatePostById(id, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete or archive a post.
     * @param {string} id
     * @param {Post} post Post to archive or delete.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteArchivePost(
      id: string,
      post: Post,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .deleteArchivePost(id, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById(id: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .getPostById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filter post by list of category label
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: any
    ): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(page, pageSize, categories, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById(
      id: string,
      reactionType: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToPostById(id, reactionType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostingApi - object-oriented interface
 * @export
 * @class PostingApi
 * @extends {BaseAPI}
 */
export class PostingApi extends BaseAPI {
  /**
   *
   * @summary Create or Update post by identifier.
   * @param {string} id
   * @param {Post} post Post to update
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public crupdatePostById(
    id: string,
    post: Post,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .crupdatePostById(id, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete or archive a post.
   * @param {string} id
   * @param {Post} post Post to archive or delete.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public deleteArchivePost(
    id: string,
    post: Post,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .deleteArchivePost(id, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get post by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostById(id: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getPostById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all posts.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [categories] Filter post by list of category label
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPosts(
    page: number,
    pageSize: number,
    categories?: string,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPosts(page, pageSize, categories, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a post by identifier.
   * @param {string} id
   * @param {ReactionType} reactionType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public reactToPostById(
    id: string,
    reactionType: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .reactToPostById(id, reactionType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Login user.
     * @param {LoginInUser} loginInUser Login payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      loginInUser: LoginInUser,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginInUser' is not null or undefined
      assertParamExists("signIn", "loginInUser", loginInUser);
      const localVarPath = `/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginInUser,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      signUp: SignUp,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUp' is not null or undefined
      assertParamExists("signUp", "signUp", signUp);
      const localVarPath = `/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUp,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Who am I? Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/whoami`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {LoginInUser} loginInUser Login payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      loginInUser: LoginInUser,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        loginInUser,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUp: SignUp,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUp,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Who am I? Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async whoami(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.whoami(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {LoginInUser} loginInUser Login payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(loginInUser: LoginInUser, options?: any): AxiosPromise<Whoami> {
      return localVarFp
        .signIn(loginInUser, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUp: SignUp, options?: any): AxiosPromise<User> {
      return localVarFp
        .signUp(signUp, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Who am I? Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami(options?: any): AxiosPromise<Whoami> {
      return localVarFp
        .whoami(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
  /**
   *
   * @summary Login user.
   * @param {LoginInUser} loginInUser Login payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signIn(loginInUser: LoginInUser, options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .signIn(loginInUser, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign up user
   * @param {SignUp} signUp Sign up payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signUp(signUp: SignUp, options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .signUp(signUp, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Who am I? Tells you who you are.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public whoami(options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .whoami(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserById", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all users with criteria.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [userName] Filter user by first name, lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      page: number,
      pageSize: number,
      userName?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getUsers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getUsers", "pageSize", pageSize);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (userName !== undefined) {
        localVarQueryParameter["user_name"] = userName;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update user by identifier.
     * @param {string} id
     * @param {User} user User to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserById: async (
      id: string,
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("updateUserById", "id", id);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("updateUserById", "user", user);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all users with criteria.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [userName] Filter user by first name, lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      page: number,
      pageSize: number,
      userName?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        page,
        pageSize,
        userName,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Update user by identifier.
     * @param {string} id
     * @param {User} user User to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async updateUserById(
      id: string,
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserById(
        id,
        user,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all users with criteria.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [userName] Filter user by first name, lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(
      page: number,
      pageSize: number,
      userName?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsers(page, pageSize, userName, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update user by identifier.
     * @param {string} id
     * @param {User} user User to update.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserById(id: string, user: User, options?: any): AxiosPromise<User> {
      return localVarFp
        .updateUserById(id, user, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Get user by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserById(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all users with criteria.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [userName] Filter user by first name, lastname or username.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(
    page: number,
    pageSize: number,
    userName?: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUsers(page, pageSize, userName, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update user by identifier.
   * @param {string} id
   * @param {User} user User to update.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public updateUserById(id: string, user: User, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .updateUserById(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

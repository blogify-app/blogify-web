/* tslint:disable */
/* eslint-disable */
/**
 * Blogify - API
 * Log in and blog on [Blogify-web](https://github.com/blogify-app/blogify-web)  to blog and interact with other users using [Blogify-api](https://github.com/blogify-app/blogify-api)  as your giveaway provider. Comment, create posts, follow new trends and react to posts as you see fit.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {Configuration} from "./configuration";
import type {AxiosPromise, AxiosInstance, AxiosRequestConfig} from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type {RequestArgs} from "./base";
// @ts-ignore
import {BASE_PATH, BaseAPI, operationServerMap} from "./base";

/**
 *
 * @export
 * @interface AuthenticationPayload
 */
export interface AuthenticationPayload {
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  provider_id?: string;
}
/**
 *
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {string}
   * @memberof Category
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  label?: string;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  id?: string;
  /**
   *
   * @type {User}
   * @memberof Comment
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  content?: string;
  /**
   *
   * @type {Date}
   * @memberof Comment
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  reply_to_id?: string;
  /**
   *
   * @type {ReactionStat}
   * @memberof Comment
   */
  reactions?: ReactionStat;
  /**
   *
   * @type {CommentStatus}
   * @memberof Comment
   */
  status?: CommentStatus;
}

/**
 *
 * @export
 * @enum {string}
 */

export const CommentStatus = {
  ENABLED: "ENABLED",
  DISABLED: "DISABLED",
} as const;

export type CommentStatus = (typeof CommentStatus)[keyof typeof CommentStatus];

/**
 *
 * @export
 * @interface Exception
 */
export interface Exception {
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  message?: string;
}
/**
 *
 * @export
 * @interface InternalServerException
 */
export interface InternalServerException {
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface NotAuthorizedException
 */
export interface NotAuthorizedException {
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {string}
   * @memberof Post
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  thumbnail_url?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title?: string;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  creation_datetime?: Date;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  updated_at?: Date;
  /**
   *
   * @type {User}
   * @memberof Post
   */
  author?: User;
  /**
   *
   * @type {PostStatus}
   * @memberof Post
   */
  status?: PostStatus;
  /**
   *
   * @type {Array<Category>}
   * @memberof Post
   */
  categories?: Array<Category>;
  /**
   *
   * @type {ReactionStat}
   * @memberof Post
   */
  reactions?: ReactionStat;
}

/**
 *
 * @export
 * @interface PostPicture
 */
export interface PostPicture {
  /**
   *
   * @type {string}
   * @memberof PostPicture
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof PostPicture
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof PostPicture
   */
  placeholder?: string;
  /**
   *
   * @type {string}
   * @memberof PostPicture
   */
  url?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const PostStatus = {
  ARCHIVED: "ARCHIVED",
  DRAFT: "DRAFT",
  DISABLED: "DISABLED",
} as const;

export type PostStatus = (typeof PostStatus)[keyof typeof PostStatus];

/**
 *
 * @export
 * @interface Reaction
 */
export interface Reaction {
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  id?: string;
  /**
   *
   * @type {ReactionType}
   * @memberof Reaction
   */
  type?: ReactionType;
  /**
   *
   * @type {Date}
   * @memberof Reaction
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  user_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  comment_id?: string;
}

/**
 *
 * @export
 * @interface ReactionStat
 */
export interface ReactionStat {
  /**
   *
   * @type {number}
   * @memberof ReactionStat
   */
  likes?: number;
  /**
   *
   * @type {number}
   * @memberof ReactionStat
   */
  dislikes?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export const ReactionType = {
  LIKE: "LIKE",
  DISLIKE: "DISLIKE",
} as const;

export type ReactionType = (typeof ReactionType)[keyof typeof ReactionType];

/**
 *
 * @export
 * @interface ResourceNotFoundException
 */
export interface ResourceNotFoundException {
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  message?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const Role = {
  CLIENT: "CLIENT",
  MANAGER: "MANAGER",
} as const;

export type Role = (typeof Role)[keyof typeof Role];

/**
 *
 * @export
 * @enum {string}
 */

export const Sex = {
  M: "M",
  F: "F",
  OTHER: "OTHER",
} as const;

export type Sex = (typeof Sex)[keyof typeof Sex];

/**
 *
 * @export
 * @interface SignUp
 */
export interface SignUp {
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof SignUp
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof SignUp
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof SignUp
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof SignUp
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof SignUp
   */
  is_followed?: boolean;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  provider_id?: string;
}

/**
 *
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof User
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof User
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof User
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_followed?: boolean;
}

/**
 *
 * @export
 * @interface UserPicture
 */
export interface UserPicture {
  /**
   *
   * @type {string}
   * @memberof UserPicture
   */
  user_id?: string;
  /**
   *
   * @type {UserPictureType}
   * @memberof UserPicture
   */
  type?: UserPictureType;
  /**
   *
   * @type {string}
   * @memberof UserPicture
   */
  url?: string;
}

/**
 *
 * @export
 * @enum {string}
 */

export const UserPictureType = {
  BANNER: "BANNER",
  PROFILE: "PROFILE",
} as const;

export type UserPictureType =
  (typeof UserPictureType)[keyof typeof UserPictureType];

/**
 *
 * @export
 * @enum {string}
 */

export const UserStatus = {
  ENABLED: "ENABLED",
  BANISHED: "BANISHED",
} as const;

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus];

/**
 *
 * @export
 * @interface Whoami
 */
export interface Whoami {
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  bearer?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof Whoami
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof Whoami
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof Whoami
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof Whoami
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof Whoami
   */
  is_followed?: boolean;
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary crupdate list of Categories.
     * @param {Array<Category>} category Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCategories: async (
      category: Array<Category>,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'category' is not null or undefined
      assertParamExists("crupdateCategories", "category", category);
      const localVarPath = `/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        category,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all Categories.
     * @param {string} [label] Filter categories by label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories: async (
      label?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/categories`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (label !== undefined) {
        localVarQueryParameter["label"] = label;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CategoryApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary crupdate list of Categories.
     * @param {Array<Category>} category Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateCategories(
      category: Array<Category>,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateCategories(category, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CategoryApi.crupdateCategories"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get all Categories.
     * @param {string} [label] Filter categories by label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategories(
      label?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(
        label,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CategoryApi.getCategories"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CategoryApiFp(configuration);
  return {
    /**
     *
     * @summary crupdate list of Categories.
     * @param {Array<Category>} category Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCategories(
      category: Array<Category>,
      options?: any
    ): AxiosPromise<Array<Category>> {
      return localVarFp
        .crupdateCategories(category, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all Categories.
     * @param {string} [label] Filter categories by label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(
      label?: string,
      options?: any
    ): AxiosPromise<Array<Category>> {
      return localVarFp
        .getCategories(label, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
  /**
   *
   * @summary crupdate list of Categories.
   * @param {Array<Category>} category Post to crupdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public crupdateCategories(
    category: Array<Category>,
    options?: AxiosRequestConfig
  ) {
    return CategoryApiFp(this.configuration)
      .crupdateCategories(category, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all Categories.
   * @param {string} [label] Filter categories by label.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public getCategories(label?: string, options?: AxiosRequestConfig) {
    return CategoryApiFp(this.configuration)
      .getCategories(label, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by its identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The comment to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCommentById: async (
      pid: string,
      cid: string,
      comment: Comment,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("crupdateCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("crupdateCommentById", "cid", cid);
      // verify required parameter 'comment' is not null or undefined
      assertParamExists("crupdateCommentById", "comment", comment);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        comment,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentById: async (
      pid: string,
      cid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("deleteCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("deleteCommentById", "cid", cid);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById: async (
      pid: string,
      cid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("getCommentById", "cid", cid);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {string} pid
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentsByPostId: async (
      pid: string,
      page: number,
      pageSize: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getCommentsByPostId", "pid", pid);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getCommentsByPostId", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getCommentsByPostId", "pageSize", pageSize);
      const localVarPath = `/posts/{pid}/comments`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToCommentById: async (
      pid: string,
      cid: string,
      type: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("reactToCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("reactToCommentById", "cid", cid);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("reactToCommentById", "type", type);
      const localVarPath = `/posts/{pid}/comments/{cid}/reaction`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by its identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The comment to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateCommentById(
      pid: string,
      cid: string,
      comment: Comment,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateCommentById(
          pid,
          cid,
          comment,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CommentsApi.crupdateCommentById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCommentById(
      pid: string,
      cid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteCommentById(pid, cid, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CommentsApi.deleteCommentById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentById(
      pid: string,
      cid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentById(
        pid,
        cid,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CommentsApi.getCommentById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {string} pid
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentsByPostId(
      pid: string,
      page: number,
      pageSize: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCommentsByPostId(
          pid,
          page,
          pageSize,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CommentsApi.getCommentsByPostId"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToCommentById(
      pid: string,
      cid: string,
      type: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reactToCommentById(
          pid,
          cid,
          type,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["CommentsApi.reactToCommentById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CommentsApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by its identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The comment to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCommentById(
      pid: string,
      cid: string,
      comment: Comment,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .crupdateCommentById(pid, cid, comment, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentById(
      pid: string,
      cid: string,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .deleteCommentById(pid, cid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById(
      pid: string,
      cid: string,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .getCommentById(pid, cid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {string} pid
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentsByPostId(
      pid: string,
      page: number,
      pageSize: number,
      options?: any
    ): AxiosPromise<Array<Comment>> {
      return localVarFp
        .getCommentsByPostId(pid, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToCommentById(
      pid: string,
      cid: string,
      type: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToCommentById(pid, cid, type, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
  /**
   *
   * @summary Crupdate comment of the identified post by its identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {Comment} comment The comment to crupdate.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public crupdateCommentById(
    pid: string,
    cid: string,
    comment: Comment,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .crupdateCommentById(pid, cid, comment, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete comment by identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public deleteCommentById(
    pid: string,
    cid: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .deleteCommentById(pid, cid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get comment by identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentById(
    pid: string,
    cid: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getCommentById(pid, cid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the identified post comments.
   * @param {string} pid
   * @param {number} page
   * @param {number} pageSize
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentsByPostId(
    pid: string,
    page: number,
    pageSize: number,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getCommentsByPostId(pid, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a comment by identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {ReactionType} type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public reactToCommentById(
    pid: string,
    cid: string,
    type: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .reactToCommentById(pid, cid, type, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FollowingApi - axios parameter creator
 * @export
 */
export const FollowingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById: async (
      uid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uid' is not null or undefined
      assertParamExists("followUserById", "uid", uid);
      const localVarPath = `/follow/{uid}`.replace(
        `{${"uid"}}`,
        encodeURIComponent(String(uid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [namePost] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedByUserId: async (
      id: string,
      page: number,
      pageSize: number,
      namePost?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFollowedByUserId", "id", id);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getFollowedByUserId", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getFollowedByUserId", "pageSize", pageSize);
      const localVarPath = `/users/{id}/follows`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (namePost !== undefined) {
        localVarQueryParameter["namePost"] = namePost;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfFollowers: async (
      page: number,
      pageSize: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getSelfFollowers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getSelfFollowers", "pageSize", pageSize);
      const localVarPath = `/users/followers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById: async (
      uid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uid' is not null or undefined
      assertParamExists("unfollowUserById", "uid", uid);
      const localVarPath = `/unfollow/{uid}`.replace(
        `{${"uid"}}`,
        encodeURIComponent(String(uid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FollowingApi - functional programming interface
 * @export
 */
export const FollowingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FollowingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followUserById(
      uid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followUserById(
        uid,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FollowingApi.followUserById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [namePost] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFollowedByUserId(
      id: string,
      page: number,
      pageSize: number,
      namePost?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFollowedByUserId(
          id,
          page,
          pageSize,
          namePost,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FollowingApi.getFollowedByUserId"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSelfFollowers(
      page: number,
      pageSize: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSelfFollowers(
          page,
          pageSize,
          name,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FollowingApi.getSelfFollowers"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unfollowUserById(
      uid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unfollowUserById(uid, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["FollowingApi.unfollowUserById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * FollowingApi - factory interface
 * @export
 */
export const FollowingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FollowingApiFp(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById(uid: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .followUserById(uid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [namePost] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedByUserId(
      id: string,
      page: number,
      pageSize: number,
      namePost?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getFollowedByUserId(id, page, pageSize, namePost, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfFollowers(
      page: number,
      pageSize: number,
      name?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getSelfFollowers(page, pageSize, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById(uid: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .unfollowUserById(uid, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FollowingApi - object-oriented interface
 * @export
 * @class FollowingApi
 * @extends {BaseAPI}
 */
export class FollowingApi extends BaseAPI {
  /**
   *
   * @summary Follow user by identifier.
   * @param {string} uid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public followUserById(uid: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .followUserById(uid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the users that the identified user follows
   * @param {string} id
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [namePost] Filters follower by first name or lastname.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public getFollowedByUserId(
    id: string,
    page: number,
    pageSize: number,
    namePost?: string,
    options?: AxiosRequestConfig
  ) {
    return FollowingApiFp(this.configuration)
      .getFollowedByUserId(id, page, pageSize, namePost, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get self followers
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [name] Filters follower by first name or lastname or username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public getSelfFollowers(
    page: number,
    pageSize: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return FollowingApiFp(this.configuration)
      .getSelfFollowers(page, pageSize, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unfollow user by identifier.
   * @param {string} uid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public unfollowUserById(uid: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .unfollowUserById(uid, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["HealthApi.ping"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @summary ping.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public ping(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PostingApi - axios parameter creator
 * @export
 */
export const PostingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById: async (
      pid: string,
      post: Post,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("crupdatePostById", "pid", pid);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("crupdatePostById", "post", post);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("deletePostById", "pid", pid);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostPictureById: async (
      pid: string,
      picId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("deletePostPictureById", "pid", pid);
      // verify required parameter 'picId' is not null or undefined
      assertParamExists("deletePostPictureById", "picId", picId);
      const localVarPath = `/posts/{pid}/pictures/{picId}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"picId"}}`, encodeURIComponent(String(picId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary get all pictures of a post
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPostPictureById: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getAllPostPictureById", "pid", pid);
      const localVarPath = `/posts/{pid}/pictures`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById: async (
      pid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getPostById", "pid", pid);
      const localVarPath = `/posts/{pid}`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary get one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostPictureById: async (
      pid: string,
      picId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getPostPictureById", "pid", pid);
      // verify required parameter 'picId' is not null or undefined
      assertParamExists("getPostPictureById", "picId", picId);
      const localVarPath = `/posts/{pid}/pictures/{picId}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"picId"}}`, encodeURIComponent(String(picId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      page: number,
      pageSize: number,
      categories?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getPosts", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getPosts", "pageSize", pageSize);
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (categories !== undefined) {
        localVarQueryParameter["categories"] = categories;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get posts for a user.
     * @param {string} uId
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostsByUserId: async (
      uId: string,
      page: number,
      pageSize: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uId' is not null or undefined
      assertParamExists("getPostsByUserId", "uId", uId);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getPostsByUserId", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getPostsByUserId", "pageSize", pageSize);
      const localVarPath = `/users/{uId}/posts`.replace(
        `{${"uId"}}`,
        encodeURIComponent(String(uId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Submit post thumbnail.
     * @param {string} pid
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPostThumbnail: async (
      pid: string,
      file?: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("putPostThumbnail", "pid", pid);
      const localVarPath = `/posts/{pid}/thumbnail`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} pid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById: async (
      pid: string,
      type: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("reactToPostById", "pid", pid);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("reactToPostById", "type", type);
      const localVarPath = `/posts/{pid}/reaction`.replace(
        `{${"pid"}}`,
        encodeURIComponent(String(pid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Upload a picture to a post.
     * @param {string} pid
     * @param {string} picId
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPostPicture: async (
      pid: string,
      picId: string,
      file?: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("uploadPostPicture", "pid", pid);
      // verify required parameter 'picId' is not null or undefined
      assertParamExists("uploadPostPicture", "picId", picId);
      const localVarPath = `/posts/{pid}/pictures/{picId}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"picId"}}`, encodeURIComponent(String(picId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostingApi - functional programming interface
 * @export
 */
export const PostingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdatePostById(
      pid: string,
      post: Post,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdatePostById(pid, post, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.crupdatePostById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePostById(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostById(
        pid,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.deletePostById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePostPictureById(
      pid: string,
      picId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPicture>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deletePostPictureById(
          pid,
          picId,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.deletePostPictureById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary get all pictures of a post
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAllPostPictureById(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<PostPicture>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getAllPostPictureById(pid, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.getAllPostPictureById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostById(
      pid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(
        pid,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.getPostById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary get one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostPictureById(
      pid: string,
      picId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPicture>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPostPictureById(pid, picId, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.getPostPictureById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        page,
        pageSize,
        categories,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.getPosts"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get posts for a user.
     * @param {string} uId
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostsByUserId(
      uId: string,
      page: number,
      pageSize: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getPostsByUserId(
          uId,
          page,
          pageSize,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.getPostsByUserId"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Submit post thumbnail.
     * @param {string} pid
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putPostThumbnail(
      pid: string,
      file?: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.putPostThumbnail(pid, file, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.putPostThumbnail"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} pid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToPostById(
      pid: string,
      type: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reactToPostById(
        pid,
        type,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.reactToPostById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Upload a picture to a post.
     * @param {string} pid
     * @param {string} picId
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadPostPicture(
      pid: string,
      picId: string,
      file?: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostPicture>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.uploadPostPicture(
          pid,
          picId,
          file,
          options
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["PostingApi.uploadPostPicture"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * PostingApi - factory interface
 * @export
 */
export const PostingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PostingApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} pid
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById(
      pid: string,
      post: Post,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .crupdatePostById(pid, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById(pid: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .deletePostById(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostPictureById(
      pid: string,
      picId: string,
      options?: any
    ): AxiosPromise<PostPicture> {
      return localVarFp
        .deletePostPictureById(pid, picId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary get all pictures of a post
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPostPictureById(
      pid: string,
      options?: any
    ): AxiosPromise<Array<PostPicture>> {
      return localVarFp
        .getAllPostPictureById(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} pid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById(pid: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .getPostById(pid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary get one picture of a post
     * @param {string} pid
     * @param {string} picId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostPictureById(
      pid: string,
      picId: string,
      options?: any
    ): AxiosPromise<PostPicture> {
      return localVarFp
        .getPostPictureById(pid, picId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: any
    ): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(page, pageSize, categories, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get posts for a user.
     * @param {string} uId
     * @param {number} page
     * @param {number} pageSize
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostsByUserId(
      uId: string,
      page: number,
      pageSize: number,
      options?: any
    ): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPostsByUserId(uId, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Submit post thumbnail.
     * @param {string} pid
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putPostThumbnail(
      pid: string,
      file?: File,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .putPostThumbnail(pid, file, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} pid
     * @param {ReactionType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById(
      pid: string,
      type: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToPostById(pid, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Upload a picture to a post.
     * @param {string} pid
     * @param {string} picId
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPostPicture(
      pid: string,
      picId: string,
      file?: File,
      options?: any
    ): AxiosPromise<PostPicture> {
      return localVarFp
        .uploadPostPicture(pid, picId, file, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostingApi - object-oriented interface
 * @export
 * @class PostingApi
 * @extends {BaseAPI}
 */
export class PostingApi extends BaseAPI {
  /**
   *
   * @summary Crupdate post by identifier.
   * @param {string} pid
   * @param {Post} post Post to crupdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public crupdatePostById(
    pid: string,
    post: Post,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .crupdatePostById(pid, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete post by identifier.
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public deletePostById(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .deletePostById(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete one picture of a post
   * @param {string} pid
   * @param {string} picId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public deletePostPictureById(
    pid: string,
    picId: string,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .deletePostPictureById(pid, picId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary get all pictures of a post
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getAllPostPictureById(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getAllPostPictureById(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get post by identifier.
   * @param {string} pid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostById(pid: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getPostById(pid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary get one picture of a post
   * @param {string} pid
   * @param {string} picId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostPictureById(
    pid: string,
    picId: string,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPostPictureById(pid, picId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all posts.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [categories] Filters by coma-separated categories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPosts(
    page: number,
    pageSize: number,
    categories?: string,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPosts(page, pageSize, categories, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get posts for a user.
   * @param {string} uId
   * @param {number} page
   * @param {number} pageSize
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostsByUserId(
    uId: string,
    page: number,
    pageSize: number,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPostsByUserId(uId, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Submit post thumbnail.
   * @param {string} pid
   * @param {File} [file]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public putPostThumbnail(
    pid: string,
    file?: File,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .putPostThumbnail(pid, file, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a post by identifier.
   * @param {string} pid
   * @param {ReactionType} type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public reactToPostById(
    pid: string,
    type: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .reactToPostById(pid, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Upload a picture to a post.
   * @param {string} pid
   * @param {string} picId
   * @param {File} [file]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public uploadPostPicture(
    pid: string,
    picId: string,
    file?: File,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .uploadPostPicture(pid, picId, file, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      authenticationPayload: AuthenticationPayload,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authenticationPayload' is not null or undefined
      assertParamExists(
        "signIn",
        "authenticationPayload",
        authenticationPayload
      );
      const localVarPath = `/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authenticationPayload,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      signUp: SignUp,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUp' is not null or undefined
      assertParamExists("signUp", "signUp", signUp);
      const localVarPath = `/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUp,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/whoami`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      authenticationPayload: AuthenticationPayload,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        authenticationPayload,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["SecurityApi.signIn"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUp: SignUp,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUp,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["SecurityApi.signUp"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async whoami(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.whoami(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["SecurityApi.whoami"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(
      authenticationPayload: AuthenticationPayload,
      options?: any
    ): AxiosPromise<Whoami> {
      return localVarFp
        .signIn(authenticationPayload, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUp: SignUp, options?: any): AxiosPromise<User> {
      return localVarFp
        .signUp(signUp, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami(options?: any): AxiosPromise<Whoami> {
      return localVarFp
        .whoami(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
  /**
   *
   * @summary Login user.
   * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signIn(
    authenticationPayload: AuthenticationPayload,
    options?: AxiosRequestConfig
  ) {
    return SecurityApiFp(this.configuration)
      .signIn(authenticationPayload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign up user
   * @param {SignUp} signUp Sign up payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signUp(signUp: SignUp, options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .signUp(signUp, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Tells you who you are.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public whoami(options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .whoami(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById: async (
      id: string,
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("crupdateUserById", "id", id);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("crupdateUserById", "user", user);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPicture: async (
      uid: string,
      type: UserPictureType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uid' is not null or undefined
      assertParamExists("deleteUserPicture", "uid", uid);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("deleteUserPicture", "type", type);
      const localVarPath = `/users/{uid}/pictures`.replace(
        `{${"uid"}}`,
        encodeURIComponent(String(uid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserById", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPicture: async (
      uid: string,
      type: UserPictureType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uid' is not null or undefined
      assertParamExists("getUserPicture", "uid", uid);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("getUserPicture", "type", type);
      const localVarPath = `/users/{uid}/pictures`.replace(
        `{${"uid"}}`,
        encodeURIComponent(String(uid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      page: number,
      pageSize: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getUsers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getUsers", "pageSize", pageSize);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Submit user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserPicture: async (
      uid: string,
      type: UserPictureType,
      file?: File,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'uid' is not null or undefined
      assertParamExists("putUserPicture", "uid", uid);
      // verify required parameter 'type' is not null or undefined
      assertParamExists("putUserPicture", "type", type);
      const localVarPath = `/users/{uid}/pictures`.replace(
        `{${"uid"}}`,
        encodeURIComponent(String(uid))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration &&
        configuration.formDataCtor) ||
        FormData)();

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (type !== undefined) {
        localVarQueryParameter["type"] = type;
      }

      if (file !== undefined) {
        localVarFormParams.append("file", file as any);
      }

      localVarHeaderParameter["Content-Type"] = "multipart/form-data";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateUserById(
      id: string,
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateUserById(id, user, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.crupdateUserById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteUserPicture(
      uid: string,
      type: UserPictureType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPicture>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteUserPicture(uid, type, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.deleteUserPicture"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.getUserById"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserPicture(
      uid: string,
      type: UserPictureType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPicture>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPicture(
        uid,
        type,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.getUserPicture"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      page: number,
      pageSize: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        page,
        pageSize,
        name,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.getUsers"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Submit user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putUserPicture(
      uid: string,
      type: UserPictureType,
      file?: File,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserPicture>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putUserPicture(
        uid,
        type,
        file,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["UserApi.putUserPicture"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById(
      id: string,
      user: User,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .crupdateUserById(id, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserPicture(
      uid: string,
      type: UserPictureType,
      options?: any
    ): AxiosPromise<UserPicture> {
      return localVarFp
        .deleteUserPicture(uid, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserPicture(
      uid: string,
      type: UserPictureType,
      options?: any
    ): AxiosPromise<UserPicture> {
      return localVarFp
        .getUserPicture(uid, type, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(
      page: number,
      pageSize: number,
      name?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsers(page, pageSize, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Submit user picture of the type profile banner or profile picture
     * @param {string} uid
     * @param {UserPictureType} type
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putUserPicture(
      uid: string,
      type: UserPictureType,
      file?: File,
      options?: any
    ): AxiosPromise<UserPicture> {
      return localVarFp
        .putUserPicture(uid, type, file, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Crupdate user by identifier.
   * @param {string} id
   * @param {User} user User to crupdate.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public crupdateUserById(
    id: string,
    user: User,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .crupdateUserById(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete user picture of the type profile banner or profile picture
   * @param {string} uid
   * @param {UserPictureType} type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public deleteUserPicture(
    uid: string,
    type: UserPictureType,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .deleteUserPicture(uid, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserById(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user picture of the type profile banner or profile picture
   * @param {string} uid
   * @param {UserPictureType} type
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserPicture(
    uid: string,
    type: UserPictureType,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUserPicture(uid, type, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all users.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [name] Filter user by first name or lastname or username.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(
    page: number,
    pageSize: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUsers(page, pageSize, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Submit user picture of the type profile banner or profile picture
   * @param {string} uid
   * @param {UserPictureType} type
   * @param {File} [file]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public putUserPicture(
    uid: string,
    type: UserPictureType,
    file?: File,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .putUserPicture(uid, type, file, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

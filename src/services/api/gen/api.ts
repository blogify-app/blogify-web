/* tslint:disable */
/* eslint-disable */
/**
 * Blogify - API
 * Log in and blog on [Blogify-web](https://github.com/blogify-app/blogify-web)  to blog and interact with other users using [Blogify-api](https://github.com/blogify-app/blogify-api)  as your giveaway provider. Comment, create posts, follow new trends and react to posts as you see fit.
 *
 * The version of the OpenAPI document: latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {Configuration} from "./configuration.ts";
import globalAxios, {
  AxiosPromise,
  AxiosInstance,
  AxiosRequestConfig,
} from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setBearerAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common.ts";
// @ts-ignore
import {BASE_PATH, RequestArgs, BaseAPI} from "./base.ts";

/**
 *
 * @export
 * @interface AuthenticationPayload
 */
export interface AuthenticationPayload {
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof AuthenticationPayload
   */
  provider_id?: string;
}
/**
 *
 * @export
 * @interface BadRequestException
 */
export interface BadRequestException {
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof BadRequestException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {string}
   * @memberof Category
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Category
   */
  label?: string;
}
/**
 *
 * @export
 * @interface Comment
 */
export interface Comment {
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  id?: string;
  /**
   *
   * @type {User}
   * @memberof Comment
   */
  user?: User;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  content?: string;
  /**
   *
   * @type {Date}
   * @memberof Comment
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Comment
   */
  reply_to_id?: string;
  /**
   *
   * @type {ReactionStat}
   * @memberof Comment
   */
  reactions?: ReactionStat;
  /**
   *
   * @type {CommentStatus}
   * @memberof Comment
   */
  status?: CommentStatus;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum CommentStatus {
  ENABLED = "ENABLED",
  DISABLED = "DISABLED",
}

/**
 *
 * @export
 * @interface Exception
 */
export interface Exception {
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof Exception
   */
  message?: string;
}
/**
 *
 * @export
 * @interface InternalServerException
 */
export interface InternalServerException {
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof InternalServerException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface NotAuthorizedException
 */
export interface NotAuthorizedException {
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof NotAuthorizedException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   *
   * @type {string}
   * @memberof Post
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  thumbnail_url?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  content?: string;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  title?: string;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  creation_datetime?: Date;
  /**
   *
   * @type {Date}
   * @memberof Post
   */
  updated_at?: Date;
  /**
   *
   * @type {string}
   * @memberof Post
   */
  author_id?: string;
  /**
   *
   * @type {PostStatus}
   * @memberof Post
   */
  status?: PostStatus;
  /**
   *
   * @type {Array<Category>}
   * @memberof Post
   */
  categories?: Array<Category>;
  /**
   *
   * @type {ReactionStat}
   * @memberof Post
   */
  reactions?: ReactionStat;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum PostStatus {
  ARCHIVED = "ARCHIVED",
  DRAFT = "DRAFT",
  DISABLED = "DISABLED",
}

/**
 *
 * @export
 * @interface Reaction
 */
export interface Reaction {
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  id?: string;
  /**
   *
   * @type {ReactionType}
   * @memberof Reaction
   */
  type?: ReactionType;
  /**
   *
   * @type {Date}
   * @memberof Reaction
   */
  creation_datetime?: Date;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  user_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  post_id?: string;
  /**
   *
   * @type {string}
   * @memberof Reaction
   */
  comment_id?: string;
}
/**
 *
 * @export
 * @interface ReactionStat
 */
export interface ReactionStat {
  /**
   *
   * @type {number}
   * @memberof ReactionStat
   */
  likes?: number;
  /**
   *
   * @type {number}
   * @memberof ReactionStat
   */
  dislikes?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum ReactionType {
  LIKE = "LIKE",
  DISLIKE = "DISLIKE",
}

/**
 *
 * @export
 * @interface ResourceNotFoundException
 */
export interface ResourceNotFoundException {
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof ResourceNotFoundException
   */
  message?: string;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum Role {
  CLIENT = "CLIENT",
  MANAGER = "MANAGER",
}

/**
 *
 * @export
 * @enum {string}
 */

export enum Sex {
  M = "M",
  F = "F",
  OTHER = "OTHER",
}

/**
 *
 * @export
 * @interface SignUp
 */
export interface SignUp {
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof SignUp
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof SignUp
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof SignUp
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof SignUp
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof SignUp
   */
  is_followed?: boolean;
  /**
   *
   * @type {string}
   * @memberof SignUp
   */
  provider_id?: string;
}
/**
 *
 * @export
 * @interface TooManyRequestsException
 */
export interface TooManyRequestsException {
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof TooManyRequestsException
   */
  message?: string;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {string}
   * @memberof User
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof User
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof User
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof User
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof User
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof User
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof User
   */
  is_followed?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */

export enum UserStatus {
  ENABLED = "ENABLED",
  BANISHED = "BANISHED",
}

/**
 *
 * @export
 * @interface Whoami
 */
export interface Whoami {
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  id?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  bearer?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  last_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  first_name?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  birth_date?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  photo_url?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  bio?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  profile_banner_url?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof Whoami
   */
  about?: string;
  /**
   *
   * @type {UserStatus}
   * @memberof Whoami
   */
  status?: UserStatus;
  /**
   *
   * @type {Sex}
   * @memberof Whoami
   */
  sex?: Sex;
  /**
   *
   * @type {Date}
   * @memberof Whoami
   */
  entrance_datetime?: Date;
  /**
   *
   * @type {Array<Category>}
   * @memberof Whoami
   */
  categories?: Array<Category>;
  /**
   *
   * @type {boolean}
   * @memberof Whoami
   */
  is_followed?: boolean;
}

/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by id
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The crupdated comments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCommentById: async (
      pid: string,
      cid: string,
      comment: Comment,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("crupdateCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("crupdateCommentById", "cid", cid);
      // verify required parameter 'comment' is not null or undefined
      assertParamExists("crupdateCommentById", "comment", comment);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        comment,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentById: async (
      pid: string,
      cid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("deleteCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("deleteCommentById", "cid", cid);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById: async (
      pid: string,
      cid: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'pid' is not null or undefined
      assertParamExists("getCommentById", "pid", pid);
      // verify required parameter 'cid' is not null or undefined
      assertParamExists("getCommentById", "cid", cid);
      const localVarPath = `/posts/{pid}/comments/{cid}`
        .replace(`{${"pid"}}`, encodeURIComponent(String(pid)))
        .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentsByPostId: async (
      page: number,
      pageSize: number,
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getCommentsByPostId", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getCommentsByPostId", "pageSize", pageSize);
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getCommentsByPostId", "id", id);
      const localVarPath = `/posts/{id}/comments`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToCommentByid: async (
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reactToCommentByid", "id", id);
      // verify required parameter 'commentId' is not null or undefined
      assertParamExists("reactToCommentByid", "commentId", commentId);
      // verify required parameter 'reactionType' is not null or undefined
      assertParamExists("reactToCommentByid", "reactionType", reactionType);
      const localVarPath = `/post/{id}/comments/{comment_id}/reaction`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"comment_id"}}`, encodeURIComponent(String(commentId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (reactionType !== undefined) {
        localVarQueryParameter["reaction_type"] = reactionType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by id
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The crupdated comments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateCommentById(
      pid: string,
      cid: string,
      comment: Comment,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateCommentById(
          pid,
          cid,
          comment,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCommentById(
      pid: string,
      cid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.deleteCommentById(pid, cid, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentById(
      pid: string,
      cid: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCommentById(
        pid,
        cid,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCommentsByPostId(
      page: number,
      pageSize: number,
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getCommentsByPostId(
          page,
          pageSize,
          id,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToCommentByid(
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reactToCommentByid(
          id,
          commentId,
          reactionType,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = CommentsApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate comment of the identified post by id
     * @param {string} pid
     * @param {string} cid
     * @param {Comment} comment The crupdated comments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateCommentById(
      pid: string,
      cid: string,
      comment: Comment,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .crupdateCommentById(pid, cid, comment, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentById(
      pid: string,
      cid: string,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .deleteCommentById(pid, cid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get comment by identifier.
     * @param {string} pid
     * @param {string} cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentById(
      pid: string,
      cid: string,
      options?: any
    ): AxiosPromise<Comment> {
      return localVarFp
        .getCommentById(pid, cid, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the identified post comments.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCommentsByPostId(
      page: number,
      pageSize: number,
      id: string,
      options?: any
    ): AxiosPromise<Array<Comment>> {
      return localVarFp
        .getCommentsByPostId(page, pageSize, id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a comment by identifier.
     * @param {string} id
     * @param {string} commentId
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToCommentByid(
      id: string,
      commentId: string,
      reactionType: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToCommentByid(id, commentId, reactionType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
  /**
   *
   * @summary Crupdate comment of the identified post by id
   * @param {string} pid
   * @param {string} cid
   * @param {Comment} comment The crupdated comments.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public crupdateCommentById(
    pid: string,
    cid: string,
    comment: Comment,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .crupdateCommentById(pid, cid, comment, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete comment by identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public deleteCommentById(
    pid: string,
    cid: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .deleteCommentById(pid, cid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get comment by identifier.
   * @param {string} pid
   * @param {string} cid
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentById(
    pid: string,
    cid: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getCommentById(pid, cid, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the identified post comments.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public getCommentsByPostId(
    page: number,
    pageSize: number,
    id: string,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .getCommentsByPostId(page, pageSize, id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a comment by identifier.
   * @param {string} id
   * @param {string} commentId
   * @param {ReactionType} reactionType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommentsApi
   */
  public reactToCommentByid(
    id: string,
    commentId: string,
    reactionType: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return CommentsApiFp(this.configuration)
      .reactToCommentByid(id, commentId, reactionType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * FollowingApi - axios parameter creator
 * @export
 */
export const FollowingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("followUserById", "userId", userId);
      const localVarPath = `/follow/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedByUserId: async (
      id: string,
      page: number,
      pageSize: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getFollowedByUserId", "id", id);
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getFollowedByUserId", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getFollowedByUserId", "pageSize", pageSize);
      const localVarPath = `/users/{id}/follows`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfFollowers: async (
      page: number,
      pageSize: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getSelfFollowers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getSelfFollowers", "pageSize", pageSize);
      const localVarPath = `/users/followers`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById: async (
      userId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      assertParamExists("unfollowUserById", "userId", userId);
      const localVarPath = `/unfollow/{user_id}`.replace(
        `{${"user_id"}}`,
        encodeURIComponent(String(userId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * FollowingApi - functional programming interface
 * @export
 */
export const FollowingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    FollowingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async followUserById(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.followUserById(
        userId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getFollowedByUserId(
      id: string,
      page: number,
      pageSize: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getFollowedByUserId(
          id,
          page,
          pageSize,
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getSelfFollowers(
      page: number,
      pageSize: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getSelfFollowers(
          page,
          pageSize,
          name,
          options
        );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async unfollowUserById(
      userId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.unfollowUserById(userId, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * FollowingApi - factory interface
 * @export
 */
export const FollowingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FollowingApiFp(configuration);
  return {
    /**
     *
     * @summary Follow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followUserById(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .followUserById(userId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get the users that the identified user follows
     * @param {string} id
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedByUserId(
      id: string,
      page: number,
      pageSize: number,
      name?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getFollowedByUserId(id, page, pageSize, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get self followers
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filters follower by first name or lastname or username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfFollowers(
      page: number,
      pageSize: number,
      name?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getSelfFollowers(page, pageSize, name, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Unfollow user by identifier.
     * @param {string} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowUserById(userId: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .unfollowUserById(userId, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * FollowingApi - object-oriented interface
 * @export
 * @class FollowingApi
 * @extends {BaseAPI}
 */
export class FollowingApi extends BaseAPI {
  /**
   *
   * @summary Follow user by identifier.
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public followUserById(userId: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .followUserById(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get the users that the identified user follows
   * @param {string} id
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [name] Filters follower by first name or lastname.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public getFollowedByUserId(
    id: string,
    page: number,
    pageSize: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return FollowingApiFp(this.configuration)
      .getFollowedByUserId(id, page, pageSize, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get self followers
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [name] Filters follower by first name or lastname or username
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public getSelfFollowers(
    page: number,
    pageSize: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return FollowingApiFp(this.configuration)
      .getSelfFollowers(page, pageSize, name, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Unfollow user by identifier.
   * @param {string} userId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FollowingApi
   */
  public unfollowUserById(userId: string, options?: AxiosRequestConfig) {
    return FollowingApiFp(this.configuration)
      .unfollowUserById(userId, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/ping`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async ping(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.ping(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthApiFp(configuration);
  return {
    /**
     *
     * @summary ping.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    ping(options?: any): AxiosPromise<string> {
      return localVarFp
        .ping(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
  /**
   *
   * @summary ping.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthApi
   */
  public ping(options?: AxiosRequestConfig) {
    return HealthApiFp(this.configuration)
      .ping(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * PostingApi - axios parameter creator
 * @export
 */
export const PostingApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} id
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById: async (
      id: string,
      post: Post,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("crupdatePostById", "id", id);
      // verify required parameter 'post' is not null or undefined
      assertParamExists("crupdatePostById", "post", post);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        post,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deletePostById", "id", id);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getPostById", "id", id);
      const localVarPath = `/posts/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts: async (
      page: number,
      pageSize: number,
      categories?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getPosts", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getPosts", "pageSize", pageSize);
      const localVarPath = `/posts`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (categories !== undefined) {
        localVarQueryParameter["categories"] = categories;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById: async (
      id: string,
      reactionType: ReactionType,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reactToPostById", "id", id);
      // verify required parameter 'reactionType' is not null or undefined
      assertParamExists("reactToPostById", "reactionType", reactionType);
      const localVarPath = `/posts/{id}/reaction`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (reactionType !== undefined) {
        localVarQueryParameter["reaction_type"] = reactionType;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * PostingApi - functional programming interface
 * @export
 */
export const PostingApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PostingApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} id
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdatePostById(
      id: string,
      post: Post,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdatePostById(id, post, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deletePostById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deletePostById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPostById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPostById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Post>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getPosts(
        page,
        pageSize,
        categories,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reactToPostById(
      id: string,
      reactionType: ReactionType,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reaction>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reactToPostById(
        id,
        reactionType,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * PostingApi - factory interface
 * @export
 */
export const PostingApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = PostingApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate post by identifier.
     * @param {string} id
     * @param {Post} post Post to crupdate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdatePostById(
      id: string,
      post: Post,
      options?: any
    ): AxiosPromise<Post> {
      return localVarFp
        .crupdatePostById(id, post, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostById(id: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .deletePostById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get post by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostById(id: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .getPostById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all posts.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [categories] Filters by coma-separated categories.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPosts(
      page: number,
      pageSize: number,
      categories?: string,
      options?: any
    ): AxiosPromise<Array<Post>> {
      return localVarFp
        .getPosts(page, pageSize, categories, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary React to a post by identifier.
     * @param {string} id
     * @param {ReactionType} reactionType
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reactToPostById(
      id: string,
      reactionType: ReactionType,
      options?: any
    ): AxiosPromise<Reaction> {
      return localVarFp
        .reactToPostById(id, reactionType, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * PostingApi - object-oriented interface
 * @export
 * @class PostingApi
 * @extends {BaseAPI}
 */
export class PostingApi extends BaseAPI {
  /**
   *
   * @summary Crupdate post by identifier.
   * @param {string} id
   * @param {Post} post Post to crupdate
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public crupdatePostById(
    id: string,
    post: Post,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .crupdatePostById(id, post, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete post by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public deletePostById(id: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .deletePostById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get post by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPostById(id: string, options?: AxiosRequestConfig) {
    return PostingApiFp(this.configuration)
      .getPostById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all posts.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [categories] Filters by coma-separated categories.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public getPosts(
    page: number,
    pageSize: number,
    categories?: string,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .getPosts(page, pageSize, categories, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary React to a post by identifier.
   * @param {string} id
   * @param {ReactionType} reactionType
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PostingApi
   */
  public reactToPostById(
    id: string,
    reactionType: ReactionType,
    options?: AxiosRequestConfig
  ) {
    return PostingApiFp(this.configuration)
      .reactToPostById(id, reactionType, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * SecurityApi - axios parameter creator
 * @export
 */
export const SecurityApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      authenticationPayload: AuthenticationPayload,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authenticationPayload' is not null or undefined
      assertParamExists(
        "signIn",
        "authenticationPayload",
        authenticationPayload
      );
      const localVarPath = `/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authenticationPayload,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp: async (
      signUp: SignUp,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'signUp' is not null or undefined
      assertParamExists("signUp", "signUp", signUp);
      const localVarPath = `/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signUp,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/whoami`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * SecurityApi - functional programming interface
 * @export
 */
export const SecurityApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = SecurityApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      authenticationPayload: AuthenticationPayload,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        authenticationPayload,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signUp(
      signUp: SignUp,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(
        signUp,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async whoami(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Whoami>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.whoami(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * SecurityApi - factory interface
 * @export
 */
export const SecurityApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = SecurityApiFp(configuration);
  return {
    /**
     *
     * @summary Login user.
     * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(
      authenticationPayload: AuthenticationPayload,
      options?: any
    ): AxiosPromise<Whoami> {
      return localVarFp
        .signIn(authenticationPayload, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Sign up user
     * @param {SignUp} signUp Sign up payload.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signUp(signUp: SignUp, options?: any): AxiosPromise<User> {
      return localVarFp
        .signUp(signUp, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Tells you who you are.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    whoami(options?: any): AxiosPromise<Whoami> {
      return localVarFp
        .whoami(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export class SecurityApi extends BaseAPI {
  /**
   *
   * @summary Login user.
   * @param {AuthenticationPayload} authenticationPayload Login payload. set \&#39;user_id\&#39; to null when authenticating with email and password
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signIn(
    authenticationPayload: AuthenticationPayload,
    options?: AxiosRequestConfig
  ) {
    return SecurityApiFp(this.configuration)
      .signIn(authenticationPayload, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Sign up user
   * @param {SignUp} signUp Sign up payload.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public signUp(signUp: SignUp, options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .signUp(signUp, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Tells you who you are.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SecurityApi
   */
  public whoami(options?: AxiosRequestConfig) {
    return SecurityApiFp(this.configuration)
      .whoami(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById: async (
      id: string,
      user: User,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("crupdateUserById", "id", id);
      // verify required parameter 'user' is not null or undefined
      assertParamExists("crupdateUserById", "user", user);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        user,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getUserById", "id", id);
      const localVarPath = `/users/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      page: number,
      pageSize: number,
      name?: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'page' is not null or undefined
      assertParamExists("getUsers", "page", page);
      // verify required parameter 'pageSize' is not null or undefined
      assertParamExists("getUsers", "pageSize", pageSize);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (page !== undefined) {
        localVarQueryParameter["page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["page_size"] = pageSize;
      }

      if (name !== undefined) {
        localVarQueryParameter["name"] = name;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async crupdateUserById(
      id: string,
      user: User,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.crupdateUserById(id, user, options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUserById(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(
        id,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      page: number,
      pageSize: number,
      name?: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(
        page,
        pageSize,
        name,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @summary Crupdate user by identifier.
     * @param {string} id
     * @param {User} user User to crupdate.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    crupdateUserById(
      id: string,
      user: User,
      options?: any
    ): AxiosPromise<User> {
      return localVarFp
        .crupdateUserById(id, user, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get user by identifier.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserById(id: string, options?: any): AxiosPromise<User> {
      return localVarFp
        .getUserById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get all users.
     * @param {number} page
     * @param {number} pageSize
     * @param {string} [name] Filter user by first name or lastname or username.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(
      page: number,
      pageSize: number,
      name?: string,
      options?: any
    ): AxiosPromise<Array<User>> {
      return localVarFp
        .getUsers(page, pageSize, name, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @summary Crupdate user by identifier.
   * @param {string} id
   * @param {User} user User to crupdate.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public crupdateUserById(
    id: string,
    user: User,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .crupdateUserById(id, user, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get user by identifier.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUserById(id: string, options?: AxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUserById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get all users.
   * @param {number} page
   * @param {number} pageSize
   * @param {string} [name] Filter user by first name or lastname or username.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(
    page: number,
    pageSize: number,
    name?: string,
    options?: AxiosRequestConfig
  ) {
    return UserApiFp(this.configuration)
      .getUsers(page, pageSize, name, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
